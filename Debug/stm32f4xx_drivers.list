
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e04  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fac  08000fac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fac  08000fac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000fac  08000fac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fac  08000fac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000fd8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000fd8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a5c  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008c7  00000000  00000000  00023ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00024378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00024508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003064  00000000  00000000  00024650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026f6  00000000  00000000  000276b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b748  00000000  00000000  00029daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000354f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000057c  00000000  00000000  00035548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000024 	.word	0x20000024
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f94 	.word	0x08000f94

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000028 	.word	0x20000028
 80001e4:	08000f94 	.word	0x08000f94

080001e8 <Button_ControlInit>:
#include "stm32f407xx.h"

char data[] = "I am from STM32\n";

void Button_ControlInit(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t Button;

	memset(&Button, 0, sizeof(Button));
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	220c      	movs	r2, #12
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fec5 	bl	8000f84 <memset>

	Button.pGPIOx = GPIOA;
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <Button_ControlInit+0x38>)
 80001fc:	607b      	str	r3, [r7, #4]

	//configure the User Button in the development board
	//user button connected in the development board
	Button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80001fe:	2300      	movs	r3, #0
 8000200:	727b      	strb	r3, [r7, #9]
	Button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000202:	2300      	movs	r3, #0
 8000204:	723b      	strb	r3, [r7, #8]
	Button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 8000206:	2300      	movs	r3, #0
 8000208:	72fb      	strb	r3, [r7, #11]
	Button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800020a:	2302      	movs	r3, #2
 800020c:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&Button);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f9a1 	bl	8000558 <GPIO_Init>
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000

08000224 <USART2_Init>:

void USART2_Init(USART_Handle_t *stmUSART)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]

	stmUSART->pUSARTx = USART1;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a0f      	ldr	r2, [pc, #60]	; (800026c <USART2_Init+0x48>)
 8000230:	601a      	str	r2, [r3, #0]

	stmUSART->UsartConfig.USART_BaudRate = USART_BAUD_115200;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000238:	609a      	str	r2, [r3, #8]
	stmUSART->UsartConfig.USART_DataBits = USART_8BITS;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2200      	movs	r2, #0
 800023e:	739a      	strb	r2, [r3, #14]
	stmUSART->UsartConfig.USART_HWFlowControl = USART_HW_FLOWCNTRL_DI;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	735a      	strb	r2, [r3, #13]
	stmUSART->UsartConfig.USART_Mode = USART_MODE_TX_ONLY;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	711a      	strb	r2, [r3, #4]
	stmUSART->UsartConfig.USART_Parity  = USART_PARITY_DI;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
	stmUSART->UsartConfig.USART_SamplingRate = USART_SAMPLEBY_16;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	741a      	strb	r2, [r3, #16]
	stmUSART->UsartConfig.USART_StopBits = USART_STOPBIT_1;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	73da      	strb	r2, [r3, #15]

	USART_Init(stmUSART);
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f000 fd40 	bl	8000ce4 <USART_Init>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40011000 	.word	0x40011000

08000270 <USART2_Gpio_Init>:

void USART2_Gpio_Init()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t usartGpio;

	usartGpio.pGPIOx = GPIOB;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <USART2_Gpio_Init+0x40>)
 8000278:	607b      	str	r3, [r7, #4]

	usartGpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	usartGpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800027e:	2307      	movs	r3, #7
 8000280:	737b      	strb	r3, [r7, #13]
	usartGpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	usartGpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000286:	2301      	movs	r3, #1
 8000288:	72fb      	strb	r3, [r7, #11]
	usartGpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800028a:	2302      	movs	r3, #2
 800028c:	72bb      	strb	r3, [r7, #10]

	//Configure Tx pin
	usartGpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800028e:	2306      	movs	r3, #6
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usartGpio);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f95f 	bl	8000558 <GPIO_Init>

	//Configure Rx pin
	usartGpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800029a:	2307      	movs	r3, #7
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usartGpio);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f959 	bl	8000558 <GPIO_Init>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40020400 	.word	0x40020400

080002b4 <Wait>:

void Wait(int delay)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < delay; i++) {
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e00b      	b.n	80002da <Wait+0x26>
		for(int j = delay; j >= 0; j--);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	60bb      	str	r3, [r7, #8]
 80002c6:	e002      	b.n	80002ce <Wait+0x1a>
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	daf9      	bge.n	80002c8 <Wait+0x14>
	for(int i = 0; i < delay; i++) {
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	429a      	cmp	r2, r3
 80002e0:	dbef      	blt.n	80002c2 <Wait+0xe>
	}
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <main>:


int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0
	USART_Handle_t stmUSART;

	Button_ControlInit();
 80002f6:	f7ff ff77 	bl	80001e8 <Button_ControlInit>

	USART2_Gpio_Init();
 80002fa:	f7ff ffb9 	bl	8000270 <USART2_Gpio_Init>

	USART2_Init(&stmUSART);
 80002fe:	463b      	mov	r3, r7
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff8f 	bl	8000224 <USART2_Init>

	while(1)
	{
		while(!(GPIO_ReadFromInputPin(GPIOA, 0)));
 8000306:	bf00      	nop
 8000308:	2100      	movs	r1, #0
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x3c>)
 800030c:	f000 fac4 	bl	8000898 <GPIO_ReadFromInputPin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0f8      	beq.n	8000308 <main+0x18>

		Wait(1000);
 8000316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031a:	f7ff ffcb 	bl	80002b4 <Wait>

		//USART_PeripheralControl(USART1, ENABLE);
		USART_SendData(&stmUSART, (uint8_t*)data, sizeof(data));
 800031e:	463b      	mov	r3, r7
 8000320:	2211      	movs	r2, #17
 8000322:	4903      	ldr	r1, [pc, #12]	; (8000330 <main+0x40>)
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fdaa 	bl	8000e7e <USART_SendData>
		while(!(GPIO_ReadFromInputPin(GPIOA, 0)));
 800032a:	e7ec      	b.n	8000306 <main+0x16>
 800032c:	40020000 	.word	0x40020000
 8000330:	20000000 	.word	0x20000000

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 fdeb 	bl	8000f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ffc3 	bl	80002f0 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000378:	08000fb4 	.word	0x08000fb4
  ldr r2, =_sbss
 800037c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000380:	20000040 	.word	0x20000040

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <GPIO_PclkControl>:
 * @note				- NONE
 *
 *
 */
void GPIO_PclkControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d162      	bne.n	8000460 <GPIO_PclkControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a64      	ldr	r2, [pc, #400]	; (8000530 <GPIO_PclkControl+0x1a8>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PclkControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003a2:	4b64      	ldr	r3, [pc, #400]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a63      	ldr	r2, [pc, #396]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003ae:	e0b9      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOB)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a61      	ldr	r2, [pc, #388]	; (8000538 <GPIO_PclkControl+0x1b0>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PclkControl+0x3e>
			GPIOB_PCLK_EN();
 80003b8:	4b5e      	ldr	r3, [pc, #376]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a5d      	ldr	r2, [pc, #372]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e0ae      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOC)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a5c      	ldr	r2, [pc, #368]	; (800053c <GPIO_PclkControl+0x1b4>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PclkControl+0x54>
			GPIOC_PCLK_EN();
 80003ce:	4b59      	ldr	r3, [pc, #356]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a58      	ldr	r2, [pc, #352]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003d4:	f043 0304 	orr.w	r3, r3, #4
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e0a3      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a58      	ldr	r2, [pc, #352]	; (8000540 <GPIO_PclkControl+0x1b8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PclkControl+0x6a>
			GPIOD_PCLK_EN();
 80003e4:	4b53      	ldr	r3, [pc, #332]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a52      	ldr	r2, [pc, #328]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e098      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOE)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a53      	ldr	r2, [pc, #332]	; (8000544 <GPIO_PclkControl+0x1bc>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PclkControl+0x80>
			GPIOE_PCLK_EN();
 80003fa:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a4d      	ldr	r2, [pc, #308]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000400:	f043 0310 	orr.w	r3, r3, #16
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e08d      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a4f      	ldr	r2, [pc, #316]	; (8000548 <GPIO_PclkControl+0x1c0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PclkControl+0x96>
			GPIOF_PCLK_EN();
 8000410:	4b48      	ldr	r3, [pc, #288]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a47      	ldr	r2, [pc, #284]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e082      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOG)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a4a      	ldr	r2, [pc, #296]	; (800054c <GPIO_PclkControl+0x1c4>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PclkControl+0xac>
			GPIOG_PCLK_EN();
 8000426:	4b43      	ldr	r3, [pc, #268]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a42      	ldr	r2, [pc, #264]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e077      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a46      	ldr	r2, [pc, #280]	; (8000550 <GPIO_PclkControl+0x1c8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PclkControl+0xc2>
			GPIOH_PCLK_EN();
 800043c:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a3c      	ldr	r2, [pc, #240]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e06c      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOI)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <GPIO_PclkControl+0x1cc>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d168      	bne.n	8000524 <GPIO_PclkControl+0x19c>
			GPIOI_PCLK_EN();
 8000452:	4b38      	ldr	r3, [pc, #224]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a37      	ldr	r2, [pc, #220]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e061      	b.n	8000524 <GPIO_PclkControl+0x19c>
		if(pGPIOx == GPIOA)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a33      	ldr	r2, [pc, #204]	; (8000530 <GPIO_PclkControl+0x1a8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PclkControl+0xee>
			GPIOA_PCLK_DI();
 8000468:	4b32      	ldr	r3, [pc, #200]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a31      	ldr	r2, [pc, #196]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e056      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a2f      	ldr	r2, [pc, #188]	; (8000538 <GPIO_PclkControl+0x1b0>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PclkControl+0x104>
			GPIOB_PCLK_DI();
 800047e:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a2c      	ldr	r2, [pc, #176]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000484:	f023 0302 	bic.w	r3, r3, #2
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e04b      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOC)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a2b      	ldr	r2, [pc, #172]	; (800053c <GPIO_PclkControl+0x1b4>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PclkControl+0x11a>
			GPIOC_PCLK_DI();
 8000494:	4b27      	ldr	r3, [pc, #156]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a26      	ldr	r2, [pc, #152]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800049a:	f023 0304 	bic.w	r3, r3, #4
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e040      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOD)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a26      	ldr	r2, [pc, #152]	; (8000540 <GPIO_PclkControl+0x1b8>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PclkControl+0x130>
			GPIOD_PCLK_DI();
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a21      	ldr	r2, [pc, #132]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004b0:	f023 0308 	bic.w	r3, r3, #8
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e035      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a22      	ldr	r2, [pc, #136]	; (8000544 <GPIO_PclkControl+0x1bc>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PclkControl+0x146>
			GPIOE_PCLK_DI();
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004c6:	f023 0310 	bic.w	r3, r3, #16
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e02a      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOF)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <GPIO_PclkControl+0x1c0>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PclkControl+0x15c>
			GPIOF_PCLK_DI();
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a16      	ldr	r2, [pc, #88]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004dc:	f023 0320 	bic.w	r3, r3, #32
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e01f      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <GPIO_PclkControl+0x1c4>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PclkControl+0x172>
			GPIOG_PCLK_DI();
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a10      	ldr	r2, [pc, #64]	; (8000534 <GPIO_PclkControl+0x1ac>)
 80004f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e014      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <GPIO_PclkControl+0x1c8>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PclkControl+0x188>
			GPIOH_PCLK_DI();
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <GPIO_PclkControl+0x1ac>)
 8000508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	e009      	b.n	8000524 <GPIO_PclkControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <GPIO_PclkControl+0x1cc>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d105      	bne.n	8000524 <GPIO_PclkControl+0x19c>
			GPIOI_PCLK_DI();
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <GPIO_PclkControl+0x1ac>)
 800051e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40020000 	.word	0x40020000
 8000534:	40023800 	.word	0x40023800
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	40021c00 	.word	0x40021c00
 8000554:	40022000 	.word	0x40022000

08000558 <GPIO_Init>:
 * 						  so that this API will configure the specified GPIO pin in the
 * 						  specified GPIO port as per the configurations defined in the GPIO_Config_t
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]

	//enable the Peripheral clock
	GPIO_PclkControl(pGPIOHandle->pGPIOx, ENABLE);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ff0c 	bl	8000388 <GPIO_PclkControl>

	//1. Configure the Mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	2b03      	cmp	r3, #3
 8000576:	d81f      	bhi.n	80005b8 <GPIO_Init+0x60>
	{
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	461a      	mov	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	4619      	mov	r1, r3
 8000596:	2303      	movs	r3, #3
 8000598:	408b      	lsls	r3, r1
 800059a:	43db      	mvns	r3, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	400a      	ands	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	e0ca      	b.n	800074e <GPIO_Init+0x1f6>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IRQ_FT)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d117      	bne.n	80005f0 <GPIO_Init+0x98>
		{
			//1. Configure the Corresponding FTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b4a      	ldr	r3, [pc, #296]	; (80006ec <GPIO_Init+0x194>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a46      	ldr	r2, [pc, #280]	; (80006ec <GPIO_Init+0x194>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	60d3      	str	r3, [r2, #12]
			//Clear the Corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	4b45      	ldr	r3, [pc, #276]	; (80006ec <GPIO_Init+0x194>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a40      	ldr	r2, [pc, #256]	; (80006ec <GPIO_Init+0x194>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6093      	str	r3, [r2, #8]
 80005ee:	e035      	b.n	800065c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IRQ_RT)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	d117      	bne.n	8000628 <GPIO_Init+0xd0>
		{
			//1. Configure the Corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <GPIO_Init+0x194>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	4611      	mov	r1, r2
 8000608:	4a38      	ldr	r2, [pc, #224]	; (80006ec <GPIO_Init+0x194>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6093      	str	r3, [r2, #8]
			//Clear the Corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <GPIO_Init+0x194>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	43d2      	mvns	r2, r2
 800061e:	4611      	mov	r1, r2
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <GPIO_Init+0x194>)
 8000622:	400b      	ands	r3, r1
 8000624:	60d3      	str	r3, [r2, #12]
 8000626:	e019      	b.n	800065c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IRQ_RFT)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	2b06      	cmp	r3, #6
 800062e:	d115      	bne.n	800065c <GPIO_Init+0x104>
		{
			//1. Configure the Corresponding FTSR & RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <GPIO_Init+0x194>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	4611      	mov	r1, r2
 8000640:	4a2a      	ldr	r2, [pc, #168]	; (80006ec <GPIO_Init+0x194>)
 8000642:	430b      	orrs	r3, r1
 8000644:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <GPIO_Init+0x194>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <GPIO_Init+0x194>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <GPIO_Init+0x198>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d04d      	beq.n	8000714 <GPIO_Init+0x1bc>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <GPIO_Init+0x19c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d032      	beq.n	80006e8 <GPIO_Init+0x190>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <GPIO_Init+0x1a0>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d02b      	beq.n	80006e4 <GPIO_Init+0x18c>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <GPIO_Init+0x1a4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d024      	beq.n	80006e0 <GPIO_Init+0x188>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <GPIO_Init+0x1a8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d01d      	beq.n	80006dc <GPIO_Init+0x184>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <GPIO_Init+0x1ac>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d016      	beq.n	80006d8 <GPIO_Init+0x180>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <GPIO_Init+0x1b0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d00f      	beq.n	80006d4 <GPIO_Init+0x17c>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <GPIO_Init+0x1b4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d008      	beq.n	80006d0 <GPIO_Init+0x178>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <GPIO_Init+0x1b8>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d101      	bne.n	80006cc <GPIO_Init+0x174>
 80006c8:	2308      	movs	r3, #8
 80006ca:	e024      	b.n	8000716 <GPIO_Init+0x1be>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e022      	b.n	8000716 <GPIO_Init+0x1be>
 80006d0:	2307      	movs	r3, #7
 80006d2:	e020      	b.n	8000716 <GPIO_Init+0x1be>
 80006d4:	2306      	movs	r3, #6
 80006d6:	e01e      	b.n	8000716 <GPIO_Init+0x1be>
 80006d8:	2305      	movs	r3, #5
 80006da:	e01c      	b.n	8000716 <GPIO_Init+0x1be>
 80006dc:	2304      	movs	r3, #4
 80006de:	e01a      	b.n	8000716 <GPIO_Init+0x1be>
 80006e0:	2303      	movs	r3, #3
 80006e2:	e018      	b.n	8000716 <GPIO_Init+0x1be>
 80006e4:	2302      	movs	r3, #2
 80006e6:	e016      	b.n	8000716 <GPIO_Init+0x1be>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e014      	b.n	8000716 <GPIO_Init+0x1be>
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	40022000 	.word	0x40022000
 8000714:	2300      	movs	r3, #0
 8000716:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000718:	4b5c      	ldr	r3, [pc, #368]	; (800088c <GPIO_Init+0x334>)
 800071a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071c:	4a5b      	ldr	r2, [pc, #364]	; (800088c <GPIO_Init+0x334>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000724:	7c7a      	ldrb	r2, [r7, #17]
 8000726:	7cbb      	ldrb	r3, [r7, #18]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	fa02 f103 	lsl.w	r1, r2, r3
 800072e:	4a58      	ldr	r2, [pc, #352]	; (8000890 <GPIO_Init+0x338>)
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	3302      	adds	r3, #2
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000738:	4b56      	ldr	r3, [pc, #344]	; (8000894 <GPIO_Init+0x33c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a52      	ldr	r2, [pc, #328]	; (8000894 <GPIO_Init+0x33c>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	799b      	ldrb	r3, [r3, #6]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	4619      	mov	r1, r3
 8000770:	2303      	movs	r3, #3
 8000772:	408b      	lsls	r3, r1
 8000774:	43db      	mvns	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	400a      	ands	r2, r1
 800077e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6899      	ldr	r1, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	430a      	orrs	r2, r1
 800078e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

	//3. Configure the pull-up/pull-dn register
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	79db      	ldrb	r3, [r3, #7]
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2303      	movs	r3, #3
 80007b4:	408b      	lsls	r3, r1
 80007b6:	43db      	mvns	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	400a      	ands	r2, r1
 80007c0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68d9      	ldr	r1, [r3, #12]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

	//4. Configure the Output Type Register
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7a1b      	ldrb	r3, [r3, #8]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2301      	movs	r3, #1
 80007f4:	408b      	lsls	r3, r1
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6859      	ldr	r1, [r3, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

	//5. Configure Alternate Function Register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d131      	bne.n	8000882 <GPIO_Init+0x32a>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2) );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	3208      	adds	r2, #8
 8000838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	220f      	movs	r2, #15
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	7c3a      	ldrb	r2, [r7, #16]
 8000850:	4001      	ands	r1, r0
 8000852:	3208      	adds	r2, #8
 8000854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7c3a      	ldrb	r2, [r7, #16]
 800085e:	3208      	adds	r2, #8
 8000860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a5b      	ldrb	r3, [r3, #9]
 8000868:	461a      	mov	r2, r3
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	7c3a      	ldrb	r2, [r7, #16]
 800087a:	4301      	orrs	r1, r0
 800087c:	3208      	adds	r2, #8
 800087e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40013800 	.word	0x40013800
 8000894:	40013c00 	.word	0x40013c00

08000898 <GPIO_ReadFromInputPin>:
 * @note				- NONE
 *
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)(pGPIOx->IDR >> PinNumber) & (0x00000001);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	fa22 f303 	lsr.w	r3, r2, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]

	return value;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <get_pll_clk>:
#include "stm32f407xx_rcc_driver.h"

static uint16_t Prescalers[] = {2, 4, 8, 16, 64, 128, 256, 512};

static uint32_t get_pll_clk()
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
	uint8_t clksrc;
	uint32_t pllclk;
	uint8_t pllm,pllp;
	uint16_t plln;

	clksrc = ( (RCC->PLLCFGR >> 22) & 0x01 );
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <get_pll_clk+0x80>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	0d9b      	lsrs	r3, r3, #22
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	72fb      	strb	r3, [r7, #11]

	if(clksrc == 0) {
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <get_pll_clk+0x20>
		pllclk = 16000000;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <get_pll_clk+0x84>)
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e004      	b.n	80008ee <get_pll_clk+0x2a>
	}
	else if(clksrc == 1) {
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d101      	bne.n	80008ee <get_pll_clk+0x2a>
		pllclk = 8000000;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <get_pll_clk+0x88>)
 80008ec:	60fb      	str	r3, [r7, #12]
	}

	pllm = ( RCC->PLLCFGR & 0x3F);
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <get_pll_clk+0x80>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008f8:	72bb      	strb	r3, [r7, #10]
	pllclk = pllclk / pllm;
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	60fb      	str	r3, [r7, #12]

	plln = ( (RCC->PLLCFGR >> 6) & 0x1FF);
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <get_pll_clk+0x80>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	099b      	lsrs	r3, r3, #6
 800090a:	b29b      	uxth	r3, r3
 800090c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000910:	813b      	strh	r3, [r7, #8]
	pllclk = pllclk * plln;
 8000912:	893a      	ldrh	r2, [r7, #8]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	60fb      	str	r3, [r7, #12]

	pllp = ( (RCC->PLLCFGR >> 16) & 0x03);
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <get_pll_clk+0x80>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	71fb      	strb	r3, [r7, #7]
	pllclk = pllclk / pllp;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	60fb      	str	r3, [r7, #12]

	return pllclk;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	00f42400 	.word	0x00f42400
 800094c:	007a1200 	.word	0x007a1200

08000950 <Get_APB1_Pclk>:


uint32_t Get_APB1_Pclk()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
	uint32_t systemclock;
	uint8_t clksrc,ahbpre,apb1pre;
	uint16_t temp;

	clksrc = ((RCC->CFGR >> 2) & 0x03);
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <Get_APB1_Pclk+0xa4>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000964:	7a7b      	ldrb	r3, [r7, #9]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <Get_APB1_Pclk+0x20>
		systemclock = 16000000;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <Get_APB1_Pclk+0xa8>)
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e00b      	b.n	8000988 <Get_APB1_Pclk+0x38>
	}
	else if(clksrc == 1){
 8000970:	7a7b      	ldrb	r3, [r7, #9]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <Get_APB1_Pclk+0x2c>
		systemclock = 8000000;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <Get_APB1_Pclk+0xac>)
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e005      	b.n	8000988 <Get_APB1_Pclk+0x38>
	}
	else if(clksrc == 2){
 800097c:	7a7b      	ldrb	r3, [r7, #9]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d102      	bne.n	8000988 <Get_APB1_Pclk+0x38>
		systemclock = get_pll_clk();
 8000982:	f7ff ff9f 	bl	80008c4 <get_pll_clk>
 8000986:	60f8      	str	r0, [r7, #12]
	}

	//ahb prescaler
	temp = ( (RCC->CFGR >> 4) & 0x0F);
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <Get_APB1_Pclk+0xa4>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	091b      	lsrs	r3, r3, #4
 800098e:	b29b      	uxth	r3, r3
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	80fb      	strh	r3, [r7, #6]

	if(temp < 8) {
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d802      	bhi.n	80009a2 <Get_APB1_Pclk+0x52>
		ahbpre = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	72fb      	strb	r3, [r7, #11]
 80009a0:	e005      	b.n	80009ae <Get_APB1_Pclk+0x5e>
	}
	else {
		ahbpre = Prescalers[temp - 8];
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	3b08      	subs	r3, #8
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <Get_APB1_Pclk+0xb0>)
 80009a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ac:	72fb      	strb	r3, [r7, #11]
	}

	systemclock = systemclock / ahbpre;
 80009ae:	7afb      	ldrb	r3, [r7, #11]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	60fb      	str	r3, [r7, #12]

	//abp1 prescaler
	temp = ( (RCC->CFGR >> 10) & 0x07);
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <Get_APB1_Pclk+0xa4>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	0a9b      	lsrs	r3, r3, #10
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	80fb      	strh	r3, [r7, #6]
	if(temp < 4) {
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d802      	bhi.n	80009d2 <Get_APB1_Pclk+0x82>
		apb1pre = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	72bb      	strb	r3, [r7, #10]
 80009d0:	e005      	b.n	80009de <Get_APB1_Pclk+0x8e>
	}
	else {
		apb1pre = Prescalers[temp - 4];
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	3b04      	subs	r3, #4
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <Get_APB1_Pclk+0xb0>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	72bb      	strb	r3, [r7, #10]
	}

	systemclock = systemclock / apb1pre;
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]

	return systemclock;
 80009e8:	68fb      	ldr	r3, [r7, #12]

}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	00f42400 	.word	0x00f42400
 80009fc:	007a1200 	.word	0x007a1200
 8000a00:	20000014 	.word	0x20000014

08000a04 <Get_APB2_Pclk>:


uint32_t Get_APB2_Pclk()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
	uint32_t systemclock;
	uint8_t clksrc,ahbpre,apb2pre;
	uint16_t temp;

	clksrc = ((RCC->CFGR >> 2) & 0x03);
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <Get_APB2_Pclk+0xa4>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000a18:	7a7b      	ldrb	r3, [r7, #9]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d102      	bne.n	8000a24 <Get_APB2_Pclk+0x20>
		systemclock = 16000000;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <Get_APB2_Pclk+0xa8>)
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	e00b      	b.n	8000a3c <Get_APB2_Pclk+0x38>
	}
	else if(clksrc == 1){
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d102      	bne.n	8000a30 <Get_APB2_Pclk+0x2c>
		systemclock = 8000000;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <Get_APB2_Pclk+0xac>)
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e005      	b.n	8000a3c <Get_APB2_Pclk+0x38>
	}
	else if(clksrc == 2){
 8000a30:	7a7b      	ldrb	r3, [r7, #9]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d102      	bne.n	8000a3c <Get_APB2_Pclk+0x38>
		systemclock = get_pll_clk();
 8000a36:	f7ff ff45 	bl	80008c4 <get_pll_clk>
 8000a3a:	60f8      	str	r0, [r7, #12]
	}

	//ahb prescaler
	temp = ( (RCC->CFGR >> 4) & 0x0F);
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <Get_APB2_Pclk+0xa4>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	091b      	lsrs	r3, r3, #4
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	80fb      	strh	r3, [r7, #6]

	if(temp < 8) {
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	d802      	bhi.n	8000a56 <Get_APB2_Pclk+0x52>
		ahbpre = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	72fb      	strb	r3, [r7, #11]
 8000a54:	e005      	b.n	8000a62 <Get_APB2_Pclk+0x5e>
	}
	else {
		ahbpre = Prescalers[temp - 8];
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <Get_APB2_Pclk+0xb0>)
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	72fb      	strb	r3, [r7, #11]
	}

	systemclock = systemclock / ahbpre;
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	60fb      	str	r3, [r7, #12]

	//abp1 prescaler
	temp = ( (RCC->CFGR >> 10) & 0x07);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <Get_APB2_Pclk+0xa4>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	0a9b      	lsrs	r3, r3, #10
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	80fb      	strh	r3, [r7, #6]
	if(temp < 4) {
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d802      	bhi.n	8000a86 <Get_APB2_Pclk+0x82>
		apb2pre = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	72bb      	strb	r3, [r7, #10]
 8000a84:	e005      	b.n	8000a92 <Get_APB2_Pclk+0x8e>
	}
	else {
		apb2pre = Prescalers[temp - 4];
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	3b04      	subs	r3, #4
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <Get_APB2_Pclk+0xb0>)
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	72bb      	strb	r3, [r7, #10]
	}

	systemclock = systemclock / apb2pre;
 8000a92:	7abb      	ldrb	r3, [r7, #10]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	60fb      	str	r3, [r7, #12]

	return systemclock;
 8000a9c:	68fb      	ldr	r3, [r7, #12]

}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	00f42400 	.word	0x00f42400
 8000ab0:	007a1200 	.word	0x007a1200
 8000ab4:	20000014 	.word	0x20000014

08000ab8 <set_baud_rate>:

static void set_baud_rate(USART_RegDef_t *pUSARTx, uint32_t BaudRate);


static void set_baud_rate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	uint32_t apbClk;						//variable to store the APB bus clock
	uint32_t usartDiv;						//variable to store divison factor
	uint32_t mantissaPart, exponentPart;	//components of usart divison factor

	uint32_t tempreg = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]

	//Get Peripheral Clock information
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <set_baud_rate+0xd8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d003      	beq.n	8000ad6 <set_baud_rate+0x1e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a30      	ldr	r2, [pc, #192]	; (8000b94 <set_baud_rate+0xdc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d103      	bne.n	8000ade <set_baud_rate+0x26>
		apbClk = Get_APB2_Pclk();
 8000ad6:	f7ff ff95 	bl	8000a04 <Get_APB2_Pclk>
 8000ada:	61f8      	str	r0, [r7, #28]
 8000adc:	e002      	b.n	8000ae4 <set_baud_rate+0x2c>
	else
		apbClk = Get_APB1_Pclk();
 8000ade:	f7ff ff37 	bl	8000950 <Get_APB1_Pclk>
 8000ae2:	61f8      	str	r0, [r7, #28]

	//Get the over-sampling rate
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00b      	beq.n	8000b08 <set_baud_rate+0x50>
		usartDiv = (25 * apbClk) / (2 * BaudRate);
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009a      	lsls	r2, r3, #2
 8000afa:	441a      	add	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	e00a      	b.n	8000b1e <set_baud_rate+0x66>
	else
		usartDiv = (25 * apbClk) / (4 * BaudRate);
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	009a      	lsls	r2, r3, #2
 8000b12:	441a      	add	r2, r3
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]

	//calculate the mantissa part
	mantissaPart = usartDiv / 100;
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <set_baud_rate+0xe0>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	60fb      	str	r3, [r7, #12]
	tempreg |= (mantissaPart << 4);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]

	//calculate the exponent
	exponentPart = (usartDiv - (mantissaPart * 100));
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	617b      	str	r3, [r7, #20]

	//Calculate the fraction part
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00a      	beq.n	8000b64 <set_baud_rate+0xac>
		exponentPart = ( ((exponentPart * 8) + 50) / 100) & ((uint8_t)0x07);
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	3332      	adds	r3, #50	; 0x32
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <set_baud_rate+0xe0>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <set_baud_rate+0xc0>
	else
		exponentPart = ( ((exponentPart * 16) + 50) / 100) & ((uint8_t)0x0F);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	3332      	adds	r3, #50	; 0x32
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <set_baud_rate+0xe0>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	095b      	lsrs	r3, r3, #5
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	617b      	str	r3, [r7, #20]

	tempreg |= exponentPart;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]

	//load calculated value to BRR register
	pUSARTx->BRR = tempreg;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40011400 	.word	0x40011400
 8000b98:	51eb851f 	.word	0x51eb851f

08000b9c <USART_PclkControl>:
 * @return		- None
 *
 * @note		- None
 */
void USART_PclkControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d141      	bne.n	8000c32 <USART_PclkControl+0x96>
	{
		if(pUSARTx == USART1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <USART_PclkControl+0x12c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <USART_PclkControl+0x28>
		{
			USART1_PCLK_EN();
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <USART_PclkControl+0x130>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a44      	ldr	r2, [pc, #272]	; (8000ccc <USART_PclkControl+0x130>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000bc2:	e07a      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <USART_PclkControl+0x134>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d106      	bne.n	8000bda <USART_PclkControl+0x3e>
			USART2_PCLK_EN();
 8000bcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <USART_PclkControl+0x130>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <USART_PclkControl+0x130>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd8:	e06f      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <USART_PclkControl+0x138>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d106      	bne.n	8000bf0 <USART_PclkControl+0x54>
			USART3_PCLK_EN();
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <USART_PclkControl+0x130>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <USART_PclkControl+0x130>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bee:	e064      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == UART4)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <USART_PclkControl+0x13c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d106      	bne.n	8000c06 <USART_PclkControl+0x6a>
			UART4_PCLK_EN();
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <USART_PclkControl+0x130>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <USART_PclkControl+0x130>)
 8000bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c04:	e059      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == UART5)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <USART_PclkControl+0x140>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <USART_PclkControl+0x80>
			UART5_PCLK_EN();
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <USART_PclkControl+0x130>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <USART_PclkControl+0x130>)
 8000c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c1a:	e04e      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART6)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a30      	ldr	r2, [pc, #192]	; (8000ce0 <USART_PclkControl+0x144>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d14a      	bne.n	8000cba <USART_PclkControl+0x11e>
			USART6_PCLK_EN();
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <USART_PclkControl+0x130>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <USART_PclkControl+0x130>)
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c30:	e043      	b.n	8000cba <USART_PclkControl+0x11e>
	else if(EnorDi == DISABLE)
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d140      	bne.n	8000cba <USART_PclkControl+0x11e>
		if(pUSARTx == USART1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <USART_PclkControl+0x12c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d106      	bne.n	8000c4e <USART_PclkControl+0xb2>
			USART1_PCLK_DI();
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <USART_PclkControl+0x130>)
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <USART_PclkControl+0x130>)
 8000c46:	f023 0310 	bic.w	r3, r3, #16
 8000c4a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c4c:	e035      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <USART_PclkControl+0x134>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d106      	bne.n	8000c64 <USART_PclkControl+0xc8>
			USART2_PCLK_DI();
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <USART_PclkControl+0x130>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <USART_PclkControl+0x130>)
 8000c5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c62:	e02a      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <USART_PclkControl+0x138>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d106      	bne.n	8000c7a <USART_PclkControl+0xde>
			USART3_PCLK_DI();
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <USART_PclkControl+0x130>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <USART_PclkControl+0x130>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c78:	e01f      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == UART4)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <USART_PclkControl+0x13c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d106      	bne.n	8000c90 <USART_PclkControl+0xf4>
			UART4_PCLK_DI();
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <USART_PclkControl+0x130>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <USART_PclkControl+0x130>)
 8000c88:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c8e:	e014      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == UART5)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <USART_PclkControl+0x140>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d106      	bne.n	8000ca6 <USART_PclkControl+0x10a>
			UART5_PCLK_DI();
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <USART_PclkControl+0x130>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <USART_PclkControl+0x130>)
 8000c9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ca2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ca4:	e009      	b.n	8000cba <USART_PclkControl+0x11e>
		else if(pUSARTx == USART6)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <USART_PclkControl+0x144>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d105      	bne.n	8000cba <USART_PclkControl+0x11e>
			USART6_PCLK_DI();
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <USART_PclkControl+0x130>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <USART_PclkControl+0x130>)
 8000cb4:	f023 0320 	bic.w	r3, r3, #32
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40004c00 	.word	0x40004c00
 8000cdc:	40005000 	.word	0x40005000
 8000ce0:	40011400 	.word	0x40011400

08000ce4 <USART_Init>:
 * @return		- None
 *
 * @note		- None
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
	uint8_t check = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	72fb      	strb	r3, [r7, #11]

	//Enable the Peripheral clock of the USART peripheral
	USART_PclkControl(pUSARTHandle->pUSARTx, ENABLE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff4e 	bl	8000b9c <USART_PclkControl>

	//1. Enable the USART Peripheral
	USART_PeripheralControl(pUSARTHandle->pUSARTx, ENABLE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f885 	bl	8000e16 <USART_PeripheralControl>

	//2. Configure the mode of communication
	check = pUSARTHandle->UsartConfig.USART_Mode;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	72fb      	strb	r3, [r7, #11]
	if(check == USART_MODE_TX_ONLY || check == USART_MODE_RXTX_BOTH)
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <USART_Init+0x3a>
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d103      	bne.n	8000d26 <USART_Init+0x42>
		tempreg |= (1 << USART_CR1_TE);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	60fb      	str	r3, [r7, #12]
	if(check == USART_MODE_RX_ONLY || check == USART_MODE_RXTX_BOTH)
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d002      	beq.n	8000d32 <USART_Init+0x4e>
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d103      	bne.n	8000d3a <USART_Init+0x56>
		tempreg |= (1 << USART_CR1_RE);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	60fb      	str	r3, [r7, #12]

	//3. Configure parity setting
	if(pUSARTHandle->UsartConfig.USART_Parity != USART_PARITY_DI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7b1b      	ldrb	r3, [r3, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d014      	beq.n	8000d6c <USART_Init+0x88>
	{
		//enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d48:	60fb      	str	r3, [r7, #12]
		//configure the type of parity
		if(pUSARTHandle->UsartConfig.USART_Parity == USART_PARITY_ODD)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7b1b      	ldrb	r3, [r3, #12]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d104      	bne.n	8000d5c <USART_Init+0x78>
			tempreg |= (1 << USART_CR1_PS);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	e007      	b.n	8000d6c <USART_Init+0x88>
		else if(pUSARTHandle->UsartConfig.USART_Parity == USART_PARITY_EVEN)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d103      	bne.n	8000d6c <USART_Init+0x88>
			tempreg &= ~(1 << USART_CR1_PS);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d6a:	60fb      	str	r3, [r7, #12]
	}

	//4. Configure the word length
	tempreg |= (pUSARTHandle->UsartConfig.USART_DataBits << USART_CR1_M);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b9b      	ldrb	r3, [r3, #14]
 8000d70:	031b      	lsls	r3, r3, #12
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]

	//5. Configure the over-sampling rate
	if(pUSARTHandle->UsartConfig.USART_SamplingRate == USART_SAMPLEBY_8)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7c1b      	ldrb	r3, [r3, #16]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d104      	bne.n	8000d8c <USART_Init+0xa8>
		tempreg |= ( 1 << USART_CR1_OVER8);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e003      	b.n	8000d94 <USART_Init+0xb0>
	else
		tempreg &= ~( 1 << USART_CR1_OVER8);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d92:	60fb      	str	r3, [r7, #12]

	//6. Load the CR1 register with proper configuration settings
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68d9      	ldr	r1, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]

	//7. Configure Number of Stop bits
	pUSARTHandle->pUSARTx->CR2 |= (pUSARTHandle->UsartConfig.USART_StopBits << USART_CR2_STOP);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7bdb      	ldrb	r3, [r3, #15]
 8000dae:	031b      	lsls	r3, r3, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	611a      	str	r2, [r3, #16]

	//8. Configure the Hardware Flow Control
	check = pUSARTHandle->UsartConfig.USART_HWFlowControl;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7b5b      	ldrb	r3, [r3, #13]
 8000dbe:	72fb      	strb	r3, [r7, #11]
	if(check != USART_HW_FLOWCNTRL_DI)
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d01b      	beq.n	8000dfe <USART_Init+0x11a>
	{
		if(check == USART_HW_FLOWCNTRL_CTS_ONLY || check == USART_HW_FLOWCNTRL_CTS_RTS_BOTH)
 8000dc6:	7afb      	ldrb	r3, [r7, #11]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d002      	beq.n	8000dd2 <USART_Init+0xee>
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d107      	bne.n	8000de2 <USART_Init+0xfe>
			pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_CTSE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de0:	615a      	str	r2, [r3, #20]
		if(check == USART_HW_FLOWCNTRL_RTS_ONLY || check == USART_HW_FLOWCNTRL_CTS_RTS_BOTH)
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <USART_Init+0x10a>
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d107      	bne.n	8000dfe <USART_Init+0x11a>
			pUSARTHandle->pUSARTx->CR3 |= ( 1 << USART_CR3_RTSE);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dfc:	615a      	str	r2, [r3, #20]
	}


	//9. Set Baud Rate
	set_baud_rate(pUSARTHandle->pUSARTx, pUSARTHandle->UsartConfig.USART_BaudRate);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	4619      	mov	r1, r3
 8000e08:	4610      	mov	r0, r2
 8000e0a:	f7ff fe55 	bl	8000ab8 <set_baud_rate>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <USART_PeripheralControl>:
 * @return		- None
 *
 * @note		- None
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d106      	bne.n	8000e36 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= ( 1 << USART_CR1_UE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60da      	str	r2, [r3, #12]
	}
	else if(EnorDi == DISABLE)
	{
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE);
	}
}
 8000e34:	e008      	b.n	8000e48 <USART_PeripheralControl+0x32>
	else if(EnorDi == DISABLE)
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d105      	bne.n	8000e48 <USART_PeripheralControl+0x32>
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <USART_GetFlagStatus>:
 * @return		- status of the flag
 *
 * @note		- None
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & FlagName)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <USART_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <USART_SendData>:
 * @return		- status of the flag
 *
 * @note		- Blocking API
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
	uint16_t *pData;

	while(len > 0)
 8000e8a:	e04f      	b.n	8000f2c <USART_SendData+0xae>
	{
		//wait until TXE Flag reset
		while(USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE) == FLAG_RESET);
 8000e8c:	bf00      	nop
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ffdd 	bl	8000e54 <USART_GetFlagStatus>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f6      	beq.n	8000e8e <USART_SendData+0x10>

		if(pUSARTHandle->UsartConfig.USART_DataBits == USART_9BITS)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	7b9b      	ldrb	r3, [r3, #14]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d121      	bne.n	8000eec <USART_SendData+0x6e>
		{
			pData = (uint16_t*)pTxBuffer;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	617b      	str	r3, [r7, #20]
			pUSARTHandle->pUSARTx->DR = ( (*pData) & (0x1FF) );
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000eba:	605a      	str	r2, [r3, #4]

			if(pUSARTHandle->UsartConfig.USART_Parity == USART_PARITY_DI)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	7b1b      	ldrb	r3, [r3, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <USART_SendData+0x60>
			{
				pTxBuffer++;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
				len--;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
				len--;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	e011      	b.n	8000f02 <USART_SendData+0x84>
			}
			else
			{
				pTxBuffer++;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
				//decrease the length
				len--;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e00a      	b.n	8000f02 <USART_SendData+0x84>

		}
		else
		{
			//load data to send in DR register
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer) & 0xFF;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]

			//increase the TxBuffer
			pTxBuffer++;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]

			//decrease the length
			len--;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
		}


		//check for the last byte transmission
		if(len == 0)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <USART_SendData+0xae>
		{
			while(USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC) == FLAG_RESET);
 8000f08:	bf00      	nop
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff9f 	bl	8000e54 <USART_GetFlagStatus>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f6      	beq.n	8000f0a <USART_SendData+0x8c>

			//clear the TC bit
			pUSARTHandle->pUSARTx->SR &= ~(USART_FLAG_TC);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2a:	601a      	str	r2, [r3, #0]
	while(len > 0)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1ac      	bne.n	8000e8c <USART_SendData+0xe>
		}
	}
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <__libc_init_array>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4d0d      	ldr	r5, [pc, #52]	; (8000f74 <__libc_init_array+0x38>)
 8000f40:	4c0d      	ldr	r4, [pc, #52]	; (8000f78 <__libc_init_array+0x3c>)
 8000f42:	1b64      	subs	r4, r4, r5
 8000f44:	10a4      	asrs	r4, r4, #2
 8000f46:	2600      	movs	r6, #0
 8000f48:	42a6      	cmp	r6, r4
 8000f4a:	d109      	bne.n	8000f60 <__libc_init_array+0x24>
 8000f4c:	4d0b      	ldr	r5, [pc, #44]	; (8000f7c <__libc_init_array+0x40>)
 8000f4e:	4c0c      	ldr	r4, [pc, #48]	; (8000f80 <__libc_init_array+0x44>)
 8000f50:	f000 f820 	bl	8000f94 <_init>
 8000f54:	1b64      	subs	r4, r4, r5
 8000f56:	10a4      	asrs	r4, r4, #2
 8000f58:	2600      	movs	r6, #0
 8000f5a:	42a6      	cmp	r6, r4
 8000f5c:	d105      	bne.n	8000f6a <__libc_init_array+0x2e>
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f64:	4798      	blx	r3
 8000f66:	3601      	adds	r6, #1
 8000f68:	e7ee      	b.n	8000f48 <__libc_init_array+0xc>
 8000f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f6e:	4798      	blx	r3
 8000f70:	3601      	adds	r6, #1
 8000f72:	e7f2      	b.n	8000f5a <__libc_init_array+0x1e>
 8000f74:	08000fac 	.word	0x08000fac
 8000f78:	08000fac 	.word	0x08000fac
 8000f7c:	08000fac 	.word	0x08000fac
 8000f80:	08000fb0 	.word	0x08000fb0

08000f84 <memset>:
 8000f84:	4402      	add	r2, r0
 8000f86:	4603      	mov	r3, r0
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d100      	bne.n	8000f8e <memset+0xa>
 8000f8c:	4770      	bx	lr
 8000f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f92:	e7f9      	b.n	8000f88 <memset+0x4>

08000f94 <_init>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	bf00      	nop
 8000f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9a:	bc08      	pop	{r3}
 8000f9c:	469e      	mov	lr, r3
 8000f9e:	4770      	bx	lr

08000fa0 <_fini>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	bf00      	nop
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr
